# -*- coding: utf-8 -*-
import web
import json
import time
import random
from model.dbmodel import *

#全局host 配置
host = web.ctx.get("homedomain", "http://wulei19881218.gicp.net:8080")
#host = "http://wulei19881218.gicp.net:8080"


#region code1
#用户获取验证码
class GetVerificationCode():
    def POST(self):
        ##data = web.data()
        statuDict = {0: "成功", 1: "失败", 10: "查询失败", 11: "系统错误"}
        statu = 0
        returnDict = {"code": statu, "ermsg": statuDict[statu]}
        return json.dumps(returnDict)


#用户提交信息，注册
class Register():
    def GET(self):
        statuDict = {0: "注册成功", 1: "用户存在", 2: "验证码不存在", 10: "查询失败", 11: "系统错误"}
        statu = 0
        data = web.input()
        returnDict = {}
        invita_code = data.get("invita_code")
        phone_number = data.get("phone_number")
        verification_code = data.get("verification_code")
        password = data.get("password")
        #session = Session()
        session = web.ctx.orm()
        try:
            phone_record = session.query(Users).filter(Users.user_name == phone_number).first()
            is_verification_code_exist = session.query(UserCode).filter(UserCode.code_num == invita_code).first()
            if phone_record:
                statu = 1
                returnDict = {"code": statu, "ermsg": statuDict[statu]}
                return json.dumps(returnDict)
            elif not is_verification_code_exist:
                statu = 2
                returnDict = {"code": statu, "ermsg": statuDict[statu]}
                return json.dumps(returnDict)
            else:
                user = Users()
                user.user_name = phone_number
                user.password = password
                user.reg_time = int(time.time())
                session.add(user)
                session.commit()
                statu = 0
                returnDict = {"code": statu, "ermsg": statuDict[statu]}
                return json.dumps(returnDict)
        except Exception, e:
            #raise
            #return str(e)
            statu = 11
            returnDict = {"code": statu, "ermsg": statuDict[statu]}
            return json.dumps(returnDict)


#用户登录
class Login():
    def GET(self):
        session = web.ctx.orm()
        data = web.input()
        statu_dict = {0: "成功", 1: "用户密码错误", 2: "用户不存在", 10: "查询失败", 11: "系统错误"}
        user_name = data.get("user_name")
        password = data.get("password")
        user = session.query(Users).filter(Users.user_name == user_name)
        if not user.first():
            statu = 2
            result_dict = {"code": statu, "ermsg": statu_dict[statu]}
            return json.dumps(result_dict)
        else:
            if user.first().password != str(password):
                statu = 1
                result_dict = {"code": statu, "ermsg": statu_dict[statu]}
                return json.dumps(result_dict)
            else:
                statu = 0
                result_dict = {"code": statu, "ermsg": statu_dict[statu]}
                user = {}

                result_dict.update({"user": user})
                return json.dumps(result_dict)

        user = {
             "userinfo":{"userid": "123345455", "phoneNum": "15648965454", "money": "1324",
                         "ative_money": "123", "freeze_money": "12", "account": "工商银行 1234 1234 1234 1234 123"},
             "task": {"invita_task": {"invita_people": "21", "value": "2" }, "propaganda_task": {"propaganda": "3"},
                         "sale_task": {"self": "12", "self_value": "100", "friend": "10", "friend_value": "234"}}}



#用户任务
class UserTask():
    statuDict = {0: "成功", 10: "查询失败", 11: "系统错误"}
    statu = 0
    task = {"invita_task": {"invita_people": "21", "value": "2" }, "propaganda_task": {"propaganda": "3"},
                 "sale_task": {"self": "12", "self_value": "100", "friend": "10", "friend_value": "234"}}
    returnDict = {"code": statu, "ermsg": statuDict[statu]}
    returnDict.update({"task": task})
    def POST(self):
        return json.dumps(self.returnDict)
    def GET(self):
        return json.dumps(self.returnDict)


#宣传产品
class ProductPromotion():
    statuDict = {0: "成功", 10: "查询失败", 11: "系统错误"}
    statu = 0
    returnDict = {"code": statu, "ermsg": statuDict[statu]}
    image_path = host + "/lsgoapi/static/login01.png"
    #productInstance = {"name": "xxxx1", "image_path": image_path, "mark_price": "288", "agent_price": "234"}
    pagesize = 10
    def POST(self):
        data = web.input()
        productsList = []
        try:
            if "pagesize" in data:
                self.pagesize = int(data.get("pagesize"))
        except ValueError:
            self.pagesize = 10
        for i in range(self.pagesize):
            productInstance = {"name": "loco洛克蘭珂 2013新款條紋內增高方頭鞋 布面女單鞋 平跟女鞋%s" % i, "image_path": self.image_path, "mark_price": "288", "agent_price": "234"}
            productsList.append(productInstance)
        self.returnDict.update({"products": productsList})
        return json.dumps(self.returnDict)

    def GET(self):
        data = web.input()
        productsList = []
        try:
            if "pagesize" in data:
                self.pagesize = int(data.get("pagesize"))
        except ValueError:
            self.pagesize = 10
        for i in range(self.pagesize):
            productInstance = {"name": "xloco洛克蘭珂 2013新款條紋內增高方頭鞋 布面女單鞋 平跟女鞋1%s" % i, "image_path": self.image_path, "mark_price": "288", "agent_price": "234"}
            productsList.append(productInstance)
        self.returnDict.update({"products": productsList})
        return json.dumps(self.returnDict)


#产品推广
class ProductsToPromote():
    statuDict = {0: "成功", 10: "查询失败", 11: "系统错误"}
    statu = 0
    returnDict = {"code": statu, "ermsg": statuDict[statu]}
    def POST(self):
        return json.dumps(self.returnDict)
    def GET(self):
        return json.dumps(self.returnDict)


#我的钱包.可提取现金记录
class AvailableCashWithdrawal():
    statuDict = {0: "成功", 10: "查询失败", 11: "系统错误"}
    statu = 0
    returnDict = {"code": statu, "ermsg": statuDict[statu]}
    t = "%d.%02d.%02d" % time.localtime()[0:3]
    records = [{"comfrom": "whereXXX", "time": t, "value": "432"},
               {"comfrom": "whereXXX", "time": t, "value": "432"},
               {"comfrom": "whereXXX", "time": t, "value": "432"}]
    returnDict.update({"records": records})
    def POST(self):
        return json.dumps(self.returnDict)
    def GET(self):
        return json.dumps(self.returnDict)


#我的钱包.冻结资金记录
class FrozenFunds():
    statuDict = {0: "成功", 10: "查询失败", 11: "系统错误"}
    statu = 0
    returnDict = {"code": statu, "ermsg": statuDict[statu]}
    t = "%d.%02d.%02d" % time.localtime()[0:3]
    records = [{"comfrom": "whereXXX", "time": t, "value": "432"},
               {"comfrom": "whereXXX", "time": t,  "value": "432"},
               {"comfrom": "whereXXX", "time": t, "value": "432"}]
    returnDict.update({"records": records})
    def POST(self):
        return json.dumps(self.returnDict)
    def GET(self):
        return json.dumps(self.returnDict)


#我的钱包.资金转换流程
class FundsTransForm:
    statuDict = {0: "成功", 10: "查询失败", 11: "系统错误"}
    statu = 0
    returnDict = {"code": statu, "ermsg": statuDict[statu]}
    transform = {"invita_task": {"detail": "<html>xxxxxxxxxxxxxxxxgogfdsadfab</html>", "time": "2013-03-24"},
                "propagand_task": {"detail": "<html>xxxxxxxxxxxxxxxxgogfdsadfab</html>", "time": "2013-03-24"},
                "sale_task": {"detail": "<html>xxxxxxxxxxxxxxxxgogfdsadfab</html>", "time": "2013-03-24"}}
    returnDict.update({"transform": transform})
    def POST(self):
        return json.dumps(self.returnDict)
    def GET(self):
        return json.dumps(self.returnDict)


#我的钱包..整额提款
class CashWithdrawal():
    statuDict = {0: "成功", 10: "查询失败", 11: "系统错误"}
    statu = 0
    returnDict = {"code": statu, "ermsg": statuDict[statu]}
    user = {
        "userinfo":{"userid": "123345455", "phoneNum": "15648965454", "money": "1324", "ative_money": "123", "freeze_money": "12"},
        "task": {"invita_task": {"invita_people": "21", "value": "2" }, "propaganda_task": {"propaganda": "3"},
                 "sale_task": {"self": "12", "self_value": "100", "friend": "10", "friend_value": "234"}}}
    returnDict.update({"user": user})
    def POST(self):
        return json.dumps(self.returnDict)
    def GET(self):
        return json.dumps(self.returnDict)


#我的钱包.提款记录
class WithdrawalRecords():
    statuDict = {0: "成功", 10: "查询失败", 11: "系统错误"}
    statu = 0
    returnDict = {"code": statu, "ermsg": statuDict[statu]}
    records = [{"time": "2023-09-23", "value": "199", "account": "建行 1145 6542 321 4654"},
               {"time": "2023-09-23", "value": "199", "account": "建行 1145 6542 321 4654"}]
    returnDict.update({"records": records})
    def POST(self):
        return json.dumps(self.returnDict)
    def GET(self):
        return json.dumps(self.returnDict)
#endregion


#我的店铺.二维码生成（app 使用）
class GetQRCode():
    statuDict = {0: "成功", 10: "查询失败", 11: "系统错误"}
    statu = 0
    returnDict = {"code": statu, "ermsg": statuDict[statu]}
    image_path = host + "/lsgoapi/static/qrcode.png"
    def POST(self):
        content = {"qrcode": self.image_path, "time": '%d-%02d-%d %d:%d:%d' % time.localtime()[0:6]}
        self.returnDict.update({"content": content})
        return json.dumps(self.returnDict)
    def GET(self):
        content = {"qrcode": self.image_path, "time": '%d-%02d-%d %d:%d:%d' % time.localtime()[0:6]}
        self.returnDict.update({"content": content})
        return json.dumps(self.returnDict)


##我的店铺.商店产品（wap 使用） 产品搜索（wap使用）
class Products():
    statuDict = {0: "成功", 10: "查询失败", 11: "系统错误"}
    statu = 0
    image_path = host + "/lsgoapi/static/login01.png"
    image_big = host + "/share/lsgo/images/pic_0%s.jpg"
    image_bann = host + "/share/lsgo/images/ban%s.jpg"
    def GET(self):
        returnDict = {"code": self.statu, "ermsg": self.statuDict[self.statu]}
        data = web.input()
        jsonback = data.get("jsoncallback", "jsoncallback")
        if "search" in data:
            self.search = "now_empty"
            products = []
            r_i = random.randint(3, 6)
            for i in range(r_i):
                products.append({"sort_id": str(i), "product_id":"3232", "name": "xxx"+str(i),
                               "image_path": self.image_big % random.randint(1, 9), "agent_price":"343", "mark_price":"555",
                "product_id": "222"+str(i)})
            returnDict.update({"products": products})
            return "%s(%s)" % (jsonback, json.dumps(returnDict))

        mysort = [{"name": "衣服", "type":"0", "type_name":"clothes"},{"name": "鞋子", "type":"1", "type_name":"shoes"}, {"name": "食物", "type":"2", "type_name":"food"}, {"name": "旅游", "type":"3", "type_name":"travel"}, {"name": "玩", "type":"3", "type_name":"play"}]
        banners = [{"image_path": self.image_bann % random.randint(1,3) , "product_url": "http://xxx.html"},
                    {"image_path": self.image_bann % random.randint(1, 3), "product_url": "http://xxx.html"}]
        sort_detail = {}
        for i in mysort:
            sort_c = []
            for j in range(5):
                sort_c.append({"sort_id": str(j), "product_id":"3232", "name": "xxx"+str(j),
                               "image_path": self.image_big % random.randint(1, 9), "agent_price":"343", "mark_price":"555",
                "product_id": "222"+str(j)})
            sort_detail[ i["type_name"]] = sort_c
        returnDict.update({"sort": mysort, "banners": banners, "sort_detail": sort_detail})
        return "%s(%s)" % (jsonback, json.dumps(returnDict))
        #return json.dumps(returnDict)


class ProductDetail():
    image_big = host + "/share/lsgo/images/pic_0%s.jpg"
    statuDict = {0: "成功", 10: "查询失败", 11: "系统错误"}
    statu = 0
    def GET(self):
        result_dict = {"code": self.statu, "ermsg": self.statuDict[self.statu]}
        detail = {"sort_id": str(1), "product_id": "3232", "name": "xxx1",
                               "image_path": self.image_big % random.randint(1, 9), "agent_price":"343", "mark_price":"555",
                "product_id": "2222", "details": host + "/share/lsgo/images/pd1.jpg",
                "bn_image_path	": host + "/share/lsgo/images/pro_top.jpg", "bn_video_path": host + "/share/ben/video/standup.mp4"}
        result_dict.update({"detail": detail})
        return json.dumps(result_dict)


#排行榜
#销售排行  邀请排行
class Ranking:
    statuDict = {0: "成功", 10: "查询失败", 11: "系统错误"}
    statu = 0
    #returnDict = {"code": statu, "ermsg": statuDict[statu], "invita_people": "46", "rank": "8"}
    image_path = host + "/lsgoapi/static/login01.png"
    def GET(self):
        data = web.input()
        rankingIndex = data.get("index", 0)
        rankingcount = data.get("count", 3)
        ranking = []
        rankingCountType = {"1": "sale_count", "2": "invita_count"}.get(data.get("type", "1"))
        rankingkind = {"1": "self_sale", "2": "invita_people"}.get(data.get("type", "1"))
        returnDict = {"code": self.statu, "ermsg": self.statuDict[self.statu], rankingkind: "6", "rank": "8"}
        for i in range(int(rankingcount)):
            i_str = str(i)
            ranking.append({"userid": "userid" + i_str, "name": "xxxname" + i_str, "phoneNum": "15956562389",
                            "position": i_str, rankingCountType: "123", "profile": self.image_path, "weibo_id": "1234567891"})
        returnDict.update({"ranking": ranking})
        return json.dumps(returnDict)


#奖品罗列
class Prizes:
    statuDict = {0: "成功", 10: "查询失败", 11: "系统错误"}
    statu = 0
    returnDict = {"code": statu, "ermsg": statuDict[statu]}
    image_path = host + "/lsgoapi/static/login01.png"
    prizes = [{"rank_num": "一等奖", "name": "xxNamexxx", "image_path": image_path, "detail": "xxxx多少钱有什么用"},
              {"rank_num": "二等奖", "name": "xxNamexxx", "image_path": image_path ,"detail": "xxxx多少钱有什么用"},
              {"rank_num": "三等奖", "name": "xxNamexxx", "image_path": image_path, "detail": "xxxx多少钱有什么用"}]
    returnDict.update({"prizes": prizes})
    def GET(self):
        data = web.input()
        rnakingType = data.get(type, "1")
        #1 是 销售达人奖品 2 是提请达人奖品
        return json.dumps(self.returnDict, indent=4)


#获奖名单
class LuckNames:
    statuDict = {0: "成功", 10: "查询失败", 11: "系统错误"}
    statu = 0
    returnDict = {"code": statu, "ermsg": statuDict[statu]}
    image_path = host + "/lsgoapi/static/login01.png"
    prizes = [{"luckName": "王毛毛" ,"rank_num": "一等奖", "name": "xxNamexxx", "image_path": image_path, "detail": "xxxx多少钱有什么用"},
              {"luckName": "毛王王", "rank_num": "二等奖", "name": "xxNamexxx", "image_path": image_path, "detail": "xxxx多少钱有什么用"},
              {"luckName": "王王毛", "rank_num": "三等奖", "name": "xxNamexxx", "image_path": image_path, "detail": "xxxx多少钱有什么用"}]
    returnDict.update({"prizes": prizes})
    def GET(self):
        data = web.input()
        rankingType = data.get(type, "1")
        #1 是 销售达人奖品 2 是提请达人奖品
        return json.dumps(self.returnDict)


#排名记录
class RankingRecord:
    statuDict = {0: "成功", 10: "查询失败", 11: "系统错误"}
    statu = 0
    image_path = host + "/lsgoapi/static/login01.png"
    def GET(self):
        data = web.input()
        rankingIndex = data.get("index", 0)
        rankingcount = data.get("count", 3)
        ranking = []
        #1 是 销售达人奖品 2 是提请达人奖品
        rankingCountType = {"1": "sale_count", "2": "invita_count"}.get(data.get("type", "1"))
        rankingkind = {"2": "invita_people", "1": "self_sale"}.get(data.get("type", "1"))
        returnDict = {"code": self.statu, "ermsg": self.statuDict[self.statu], rankingkind: "6", "rank": "8"}
        for i in range(int(rankingcount)):
            i_str = str(i)
            ranking.append({"userid": "userid" + i_str, "name": "xxxname" + i_str, "phoneNum": "15956562389",
                            "position": i_str, rankingCountType: "123", "profile": self.image_path, "weibo_id": "1234567891" })
        returnDict.update({"ranking": ranking})
        return json.dumps(returnDict)


#销售记录
class SaleRecord():
    statuDict = {0: "成功", 10: "查询失败", 11: "系统错误"}
    statu = 0
    returnDict = {"code": statu, "ermsg": statuDict[statu], }
    image_path = host + "/lsgoapi/static/login01.png"
    def GET(self):
        data = web.input()
        rankingIndex = data.get("index", 0)
        rankingcount = data.get("count", 3)
        products = []
        for i in range(int(rankingcount)):
            i_str = str(i)
            products.append({ "name": "xxxname" + i_str, "sale_count": "15",
                            "enter_money": "23", "time": '%d-%02d-%02d' % time.localtime()[0:3]})
        self.returnDict.update({"products": products})
        return json.dumps(self.returnDict)

#邀请好友.获取邀请码
class GetInvitaCode:
    def GET(self):
        statu_dict = {0: "成功", 10: "查询失败", 11: "系统错误"}
        session = web.ctx.orm
        data = web.input()
        user_id = data.get("user_id")
        if user_id and session.query(Users).filter(Users.user_id == user_id).first():
            invita_code = get_n_random_number(8)
            while session.query(UserCode).filter(UserCode.code_num == invita_code).first():
                invita_code = get_n_random_number(8)
            user_code = UserCode()
            user_code.code_num = invita_code
            user_code.create_time = int(time.time())
            user_code.userid_owner = user_id
            session.add(user_code)
            statu = 0
            result_dict = {"code": statu, "ermsg": statu_dict[statu]}
            content = {"invita_code": invita_code, "time": '%d-%02d-%02d' % time.localtime()[0:3]}
            result_dict.update({"content": content})
            return json.dumps(result_dict)
        else:
            statu = 10
            result_dict = {"code": statu, "ermsg": statu_dict[statu]}
            return json.dumps(result_dict)

def get_n_random_number(n=8):
    code = []
    for _ in range(n):
        code.append(str(random.randint(0, 9)))
    return "".join(code)

#我的信箱
class MyEmail:
    statuDict = {0: "成功", 10: "查询失败", 11: "系统错误"}
    statu = 0
    returnDict = {"code": statu, "ermsg": statuDict[statu], }
    def GET(self):
        data = web.input()
        rankingIndex = data.get("index", 0)
        rankingcount = data.get("count", 3)
        msgs = []
        for i in range(int(rankingcount)):
           msgs.append({"title": "恭喜您。。。。。XXX", "time": "%d-%02d-%02d" % time.localtime()[0:3], "shotr_content": "XXXXXXXXX轮廓这不是信息", "content": "在ith is a a tst msg "})
        self.returnDict.update({"content": msgs})
        return json.dumps(self.returnDict)


#提款帐号修改
class AccountEdit():
    statuDict = {0: "成功", 10: "查询失败", 11: "系统错误"}
    statu = 0
    returnDict = {"code": statu, "ermsg": statuDict[statu], }
    content = [{"userid": "12323","username": "张三", "time": "%d-%02d-%02d" % time.localtime()[0:3], "area": "广东广州天河区",
                "address": "xxx 支行", "bank_type": "建设银行", "account":"441 4455 4545 5421 1234 123"}]
    returnDict.update({"content": content})
    def POST(self):
        return json.dumps(self.returnDict)
    def GET(self):
        return json.dumps(self.returnDict)

if __name__ == "__main__":
    print get_n_random_number(8)